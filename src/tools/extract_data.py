from copy import deepcopy
import os
import sys
import logging
import re
from dataclasses import dataclass
from util import (is_same_path, str_to_mbps)
'''
Usage:
sudo python3 src/tools/extract_data.py ./test_results/test1000

This tool is used to plot the throughput results which are generated by "bats-protocol-rtt-loss-test.yaml"

Output:
1. throughput_latency_loss.svg
2. throughput_latency_loss.csv (CSV file with all the throughput data table)
'''


@dataclass
class PerfPointData:
    protocol: str
    loss_rate: float = 0
    latency: int = 0
    throughput: float = 0


def plot_compound_throughput(test_results_dir):
    '''
    Plot the throughput of different protocols under different 
    loss rate and latency according to the test results in ./test_results/test1000/

    '''
    protocols = []
    perf_point = []
    for root, dirs, files in os.walk(test_results_dir):
        if not is_same_path(root, test_results_dir):
            continue
        if len(dirs) == 0:
            continue
        for dir_name in dirs:
            if not dir_name.startswith("topology-"):
                continue
            topology_description = ""
            with open(f"{test_results_dir}/{dir_name}/topology_description.txt", "r", encoding="utf-8") as f:
                topology_description = f.read()
            logging.info(f"Topology description: %s", topology_description)
            # get latency
            matches = re.findall(r"latency (\d+)ms", topology_description)
            if len(matches) == 0:
                logging.error(f"Failed to find latency in %s",
                              topology_description)
                continue
            latency = int(matches[0])
            logging.info(f"Latency: %s", latency)
            # get loss rate
            matches = re.findall(r"loss (\d+(\.\d+)?)%", topology_description)
            if len(matches) == 0:
                logging.error(f"Failed to find loss rate in %s",
                              topology_description)
                continue
            loss_rate = float(matches[0][0])
            logging.info(f"Loss rate: %s", loss_rate)
            for _, dirs, files in os.walk(f"{test_results_dir}/{dir_name}"):
                for file_name in files:
                    if not ("IperfBatsTest" in file_name or "IperfTest" in file_name):
                        logging.info(
                            f"Not a IperfBatsTest or IperfTest %s", file_name)
                        continue
                    protocol_name = file_name.split("_")[0]
                    if protocol_name not in protocols:
                        protocols.append(protocol_name)
                    perf_data = PerfPointData("", 0, 0, 0)
                    perf_data.loss_rate = loss_rate
                    perf_data.latency = latency
                    perf_data.protocol = protocol_name
                    with open(f"{test_results_dir}/{dir_name}/{file_name}", "r", encoding="utf-8") as f:
                        lines = f.readlines()
                        for line in lines:
                            if "receiver" not in line:
                                continue
                            logging.info(
                                f"Found receiver line %s", line)
                            recv_throughput_pattern = r"(\d+(\.\d+)?) (K|M|G)?bits/sec"
                            matches2 = re.findall(
                                recv_throughput_pattern, line)
                            recv_throughput = str_to_mbps(
                                matches2[0][0], matches2[0][2])
                            logging.info(
                                f"Found receiver matches2 %s", recv_throughput)
                            perf_data.throughput = recv_throughput
                            break
                    logging.info(
                        f"found a perf data %s", perf_data)
                    perf_point.append(perf_data)

    x = [perf.loss_rate for perf in perf_point]
    y = [perf.latency for perf in perf_point]

    xlabel = deepcopy(x)
    ylabel = deepcopy(y)
    xlabel = list(set(xlabel))
    ylabel = list(set(ylabel))
    xlabel.sort()
    ylabel.sort()

    # all perf point data to CVS file too
    with open(f"{test_results_dir}/throughput_latency_loss.csv", "w", encoding="utf-8") as f:
        f.write("Loss Rate/Latency,")
        for latency in ylabel:
            f.write(f"{latency}ms,")
        f.write("\n")
        for loss_rate in xlabel:
            f.write(f"{loss_rate}%,")
            for latency in ylabel:
                for perf in perf_point:
                    if perf.loss_rate == loss_rate and perf.latency == latency:
                        f.write(f"{perf.throughput},")
                        break
            f.write("\n")
    # all perf point data to markdown file with table format
    with open(f"{test_results_dir}/throughput_latency_loss.md", "a+", encoding="utf-8") as f:
        f.write("|Loss Rate/Latency|")
        for latency in ylabel:
            f.write(f"{latency}ms|")
        f.write("\n")
        f.write("|---|")
        for latency in ylabel:
            f.write("---|")
        f.write("\n")
        for loss_rate in xlabel:
            f.write(f"|{loss_rate}%|")
            for latency in ylabel:
                for perf in perf_point:
                    if perf.loss_rate == loss_rate and perf.latency == latency:
                        f.write(f"{perf.throughput}|")
                        break
            f.write("\n")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    input_dir = sys.argv[1]
    plot_compound_throughput(input_dir)
